/* ************************ */
/* THE STACK */
/* ************************ */
.l-stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

/* only necessary if CSS reset does not remove margins, or margins have been added to elements */
.l-stack * {
  margin-top: 0;
  margin-bottom: 0;
}

/* for large spacing */
.stack-large > * + * {
  margin-top: var(--s3);
}

/* for small spacing */
.stack-small > * + * {
  margin-top: var(--s-3);
}

.l-stack > * + * {
  /* remove > for recursive */
  margin-top: var(--s1); /* arbitrary value */
}

/* when the stack has only one child */
.l-stack:only-child {
  height: 100%;
}

/* to split the stack */
.l-stack > :nth-child(3) {
  margin-bottom: auto;
}

/* ************************ */
/* THE BOX */
/* ************************ */
.l-box {
  padding: var(--s1); /* arbitrary value */
  border: var(--border-thin) solid; /* do not have to use variable */
  color: var(--color-dark); /* use whatever variable name you have */
  background-color: var(--color-light); /* use whatever variable name you have */
}

/* to support inversion for dark/light modes */
.l-box * {
  color: inherit;
}

.l-box--invert {
  /* OR .box.invert */
  /* ↓ Dark becomes light, and light becomes dark */
  color: var(--color-light);
  background-color: var(--color-dark);
}

/* ************************ */
/* THE CENTRE */
/* ************************ */
.l-center {
    max-width: 60ch; /* arbitrary value */
    margin-left: auto;
    margin-right: auto;
  }

  .l-center--intrinsic {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

/* ************************ */
/* THE CLUSTER */
/* ************************ */
.l-cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s0); /* arbitrary value */
}

.l-cluster--inline {
  justify-content: space-between;
  align-items: center;
}

.l-cluster--block {
  justify-content: flex-start;
}

/* ************************ */
/* THE SIDEBAR */
/* ************************ */
.l-with-sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s0); /* arbitrary value */
}

.l-sidebar {
  /* ↓ The width when the sidebar _is_ a sidebar */
  flex-basis: 20rem; /* arbitrary value */
  flex-grow: 1;
}

.l-not-sidebar {
  /* ↓ Grow from nothing */
  flex-basis: 0;
  flex-grow: 999;
  /* ↓ Wrap when the elements are of equal width */
  min-width: 50%; /* arbitrary value */
}

/* ************************ */
/* THE SWITCHER */
/* ************************ */
.l-switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s0); /* arbitrary value */
  --threshold: 30rem; /* arbitrary value */
}

.l-switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--threshold) - 100%) * 999);
}

/* Change the proportion of an element */
.l-switcher > :nth-child(2) {
  flex-grow: 2; /* arbitrary value */
}

/* ************************ */
/* THE COVER */
/* ************************ */
.l-cover {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: var(--s0); /* arbitrary value */
}

.l-cover > * {
  margin-top: var(--s0); /* arbitrary value */
  margin-bottom: var(--s0) /* arbitrary value */
}

/* Use the next two rulesets if you have other content like a header or footer that you want to fit in the viewport height */
.l-cover > :first-child:not(h1) {
  margin-top: 0;
}

.l-cover > :last-child:not(h1) {
  margin-bottom: 0;
}

/* h1 is arbitrary, use any element that you want centered */
.l-cover > h1 {
  margin-top: auto;
  margin-bottom: auto;
}

/* ************************ */
/* THE GRID */
/* ************************ */
.l-grid {
  display: grid;
  gap: var(--s0); /* arbitrary value */
}

@supports (width: min(250px, 100%)) { /* arbitrary value for min */
  .l-grid {
    grid-template-columns: 
      repeat(auto-fit, 
      minmax(min(250px, 100%), 1fr)); /* arbitrary value for min */
  }
}

/* ************************ */
/* THE FRAME */
/* ************************ */
.l-frame {
  aspect-ratio: 16 / 9; /* arbitrary value */
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.l-frame > img,
.l-frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* ************************ */
/* THE IMPOSTER */
/* ************************ */
.l-imposter {
  position: absolute;
  top: 50%; /* arbitrary value, 50% for centering */
  left: 50%;/* arbitrary value, 50% for centering */
  transform: translate(-50%, -50%);
}

.l-imposter.contain {
  --margin: 0px; /* arbitrary value for this local variable */
  overflow: auto;
  max-width: calc(100% - (var(--margin) * 2));
  max-height: calc(100% - (var(--margin) * 2));
}

